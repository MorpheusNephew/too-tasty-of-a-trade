package main

import (
	"fmt"
	"net/http"
	"strconv"
	"time"

	"github.com/MorpheusNephew/ttoat/v2/internal/tastyworks"
)

func main() {
	fmt.Println("Welcome to Too Tasty of a Trade!")

	currentTime := time.Now()

	year, month, day := currentTime.Date()

	watchlistName := fmt.Sprintf("%d-%d-%d-autogenerated", year, month, day)

	above90WatchlistName := fmt.Sprintf("above90-%s", watchlistName)

	above80WatchlistName := fmt.Sprintf("above80-%s", watchlistName)

	above70WatchlistName := fmt.Sprintf("above70-%s", watchlistName)

	httpClient := &http.Client{}

	ttClient := tastyworks.GetTTClient(httpClient)

	username, password := "", ""

	ttClient.CreateSession(username, password)

	watchlistData, err := ttClient.GetPublicWatchlist("tasty IVR", "Equity")

	if err != nil {
		fmt.Println("Something bad happened getting watchlist data", err)
	}

	allSymbols := []string{}

	for _, entry := range watchlistData.Data.WatchlistEntries {
		allSymbols = append(allSymbols, entry.Symbol)
	}

	fmt.Printf("The length of all of the symbols is %d\n", len(allSymbols))

	// Get market metrics
	marketMetricsResponseBody, err := ttClient.GetMarketMetrics(allSymbols)

	if err != nil {
		fmt.Println("So what had happened", err, watchlistName)
	}

	marketMetricsItems := marketMetricsResponseBody.Data.Items

	fmt.Printf("The length of market data is %d\n", len(marketMetricsItems))

	above90, above80, above70 := []tastyworks.WatchlistEntry{}, []tastyworks.WatchlistEntry{}, []tastyworks.WatchlistEntry{}

	for _, item := range marketMetricsItems {
		impliedVolatilityRank, err := strconv.ParseFloat(item.ImpliedVolatilityRank, 64)

		if err != nil {
			continue
		}

		symbol := item.Symbol

		if impliedVolatilityRank >= 0.9 {
			above90 = append(above90, tastyworks.WatchlistEntry{Symbol: symbol, InstrumentType: "Equity"})
		} else if impliedVolatilityRank >= 0.8 {
			above80 = append(above80, tastyworks.WatchlistEntry{Symbol: symbol, InstrumentType: "Equity"})
		} else if impliedVolatilityRank >= 0.7 {
			above70 = append(above70, tastyworks.WatchlistEntry{Symbol: symbol, InstrumentType: "Equity"})
		}
	}

	fmt.Println(len(above90), len(above80), len(above70))

	// firstTwo := watchlistData.Data.WatchlistEntries[:2]

	ttClient.CreatePrivateWatchlist(above90WatchlistName, &above90)
	ttClient.CreatePrivateWatchlist(above80WatchlistName, &above80)
	ttClient.CreatePrivateWatchlist(above70WatchlistName, &above70)

	// ttClient.DeletePrivateWatchlist(watchlistName)

	ttClient.RemoveSession()

	// r := gin.Default()

	// r.GET("/health-check", func(ctx *gin.Context) {
	// 	ctx.JSON(http.StatusOK, gin.H{
	// 		"message": "You've made it",
	// 	})
	// })

	// r.Run(":3000")
}
